#include <stdio.h> //Standard C input Output Library
#include <unistd.h> //defines miscellaneous symbolic constants and types, and declares miscellaneous functions
#include <string.h> //C Library for various String Operations
#include <termios.h> // Contains the definitions used by the terminal I/O interfaces 
#include <fcntl.h> // FIle control, Open, close

 int main (void) // Main function
{
    int file, i; // Variable integers
    char receive[1000]; // declare a char array for receiving data 
	
	// /dev/ttyO1 is linked with UART1 Port of Beaglebone 
    if ((file = open("/dev/ttyO1", O_RDWR))<0) // Try opening file in Read Write mode
    {
	  printf("UART: Failed to open the file.\n"); //A message Print
        return 0;
    }
    
    else
    {
	printf("UART: Started\n"); //A message Print
		
	}    
    struct termios options;
    tcgetattr(file, &options); // sets the parameters associated with file

    // 9600 baud, 8-bit, enable receiver, no modem control lines
    options.c_cflag = B9600 | CS8 | CREAD | CLOCAL; //Setting Baud Rate and other Parameters
    options.c_iflag = IGNPAR;// | ICRNL; // ignore partity errors, CR -> newline
    tcflush(file, TCIFLUSH); // discard file information not transmitted
    tcsetattr(file, TCSANOW, &options); // changes occur immmediately

while(1)
{    
	int bytes_read = 0;
	bytes_read = read(file,&receive,1000); // Read the incoming Message from Arduino Module
		
	if(bytes_read > 1) //If no. of bytes are read is more than 1
	{
     		for(i=0;i<bytes_read;i++) //a for loop to print data byte by byte
		{
			printf("%c",receive[i]); //print a byte of message from Arduino Module
		}
		printf("\n");
	}
	    close(file); //Close the file at last
}
